name: Python Semantic Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write      # for pushing tags & changelog commits
  id-token: write      # for OIDC (optional, for future Trusted Publishers)
  packages: write      # for GitHub Packages (not strictly needed)

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout full history & tags
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Set up Python 3.11
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. Install your tooling & dev deps
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install uv python-semantic-release pytest build wheel setuptools

      # 4. Run tests
      - name: Run Pytest
        env:
          PYTHONPATH: src
        run: uv run pytest

      # 5. Configure Git for commits & tags
      - name: Configure Git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 6. Cut a release: bump, changelog, tag & push
      - name: Semantic Release Version
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      # → exposes:
      #    steps.release.outputs.released == 'true'
      #    steps.release.outputs.tag      == e.g. "v1.0.0"  :contentReference[oaicite:2]{index=2}

      # 7. Upload your dist/ files to the GitHub Release assets
      - name: Publish Release Assets
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      # 8. Build sdist + wheel
      - name: Build Distributions
        if: steps.release.outputs.released == 'true'
        run: |
          pip install build
          python -m build --sdist --wheel --outdir dist

      # 9. Publish to PyPI
      - name: Publish to PyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      # → logs will include:
      #    “Uploading distributions to https://upload.pypi.org/legacy/” 
